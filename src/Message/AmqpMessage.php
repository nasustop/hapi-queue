<?php

declare(strict_types=1);
/**
 * This file is part of Hapi.
 *
 * @link     https://www.nasus.top
 * @document https://wiki.nasus.top
 * @contact  xupengfei@xupengfei.net
 * @license  https://github.com/nasustop/hapi-queue/blob/master/LICENSE
 */
namespace Nasustop\HapiQueue\Message;

use Hyperf\Amqp\Builder\ExchangeBuilder;
use Hyperf\Amqp\Builder\QueueBuilder;
use Hyperf\Amqp\Constants;
use Hyperf\Amqp\Message\ConsumerMessage;
use Hyperf\Amqp\Message\ProducerMessageInterface;
use Hyperf\Amqp\Packer\Packer;
use Hyperf\Contract\ConfigInterface;
use Nasustop\HapiQueue\Amqp\ConnectionFactory;
use Nasustop\HapiQueue\Amqp\Consumer;
use Nasustop\HapiQueue\Amqp\Producer;
use Nasustop\HapiQueue\Job\JobInterface;
use PhpAmqpLib\Wire\AMQPTable;

class AmqpMessage extends ConsumerMessage implements ProducerMessageInterface
{
    protected array $properties = [
        'content_type' => 'text/plain',
        'delivery_mode' => Constants::DELIVERY_MODE_PERSISTENT,
    ];

    protected int $millisecond = 0;

    protected static bool $declare_status = false;

    protected Packer $packer;

    protected Consumer $consumer;

    protected Producer $producer;

    protected ConnectionFactory $connectionFactory;

    protected ConfigInterface $config;

    public function __construct(protected ?JobInterface $payload = null)
    {
    }

    public function getProperties(): array
    {
        return $this->properties;
    }

    public function setPayload($data): AmqpMessage
    {
        if (! $data instanceof JobInterface) {
            throw new \InvalidArgumentException('job的数据类型错误');
        }
        $this->payload = $data;
        return $this;
    }

    public function payload(): string
    {
        return $this->serialize();
    }

    /**
     * get Job.
     */
    public function job(): JobInterface
    {
        return $this->payload;
    }

    public function serialize(): string
    {
        return $this->getPacker()->pack(serialize($this->payload));
    }

    public function unserialize(string $data)
    {
        $result = parent::unserialize($data); // TODO: Change the autogenerated stub
        return unserialize($result);
    }

    public function consume($data): string
    {
        if (! $data instanceof JobInterface) {
            throw new \InvalidArgumentException('队列接收的数据类型错误');
        }
        return $data->handle();
    }

    /**
     * Set the delay time.
     * @return $this
     */
    public function setDelayMs(int $millisecond, string $name = 'x-delay'): AmqpMessage
    {
        if (empty($millisecond)) {
            return $this;
        }
        $this->millisecond = $millisecond;
        $this->properties['application_headers'] = new AMQPTable([$name => $millisecond]);
        return $this;
    }

    /**
     * Overwrite.
     */
    public function getExchangeBuilder(): ExchangeBuilder
    {
        if (empty($this->millisecond)) {
            return parent::getExchangeBuilder();
        }
        return (new ExchangeBuilder())->setExchange($this->getExchange())
            ->setType('x-delayed-message')
            ->setArguments(new AMQPTable(['x-delayed-type' => $this->getType()]));
    }

    /**
     * Overwrite.
     */
    public function getQueueBuilder(): QueueBuilder
    {
        if (empty($this->millisecond)) {
            return parent::getQueueBuilder();
        }
        return (new QueueBuilder())->setQueue($this->getQueue())
            ->setArguments(new AMQPTable(['x-dead-letter-exchange' => $this->getDeadLetterExchange()]));
    }

    public function onQueue(string $queue): AmqpMessage
    {
        $this->setQueue($queue);
        $config = $this->getConfig()->get(sprintf('queue.queue.%s', $queue));
        if (empty($config)) {
            throw new \InvalidArgumentException(sprintf('queue config [%s] is not exist!', $queue));
        }
        $app_name = (string) $this->getConfig()->get('app_name');
        $exchange = sprintf('%s.exchange.%s', $app_name, $queue);
        $routingKey = sprintf('%s.routing_key.%s', $app_name, $queue);
        $queue = sprintf('%s.queue.%s', $app_name, $queue);
        $delayQueue = explode('_delayed_', $queue);
        $delay = $delayQueue[1] ?? 0;
        return $this
            ->setExchange($exchange)
            ->setRoutingKey($routingKey)
            ->setQueue($queue)
            ->setDelayMs($delay * 1000);
    }

    public function declare(): AmqpMessage
    {
        if (self::$declare_status) {
            return $this;
        }
        $connection = $this->getConnectionFactory()->getConnection($this->getPoolName());

        $channel = $connection->getConfirmChannel();
        $this->getConsumer()->setFactory($this->getConnectionFactory())->declare($this, $channel);
        self::$declare_status = true;
        return $this;
    }

    public function dispatcher(): bool
    {
        return $this->getProducer()
            ->setFactory($this->getConnectionFactory())
            ->produce($this->declare());
    }

    protected function getDeadLetterExchange(): string
    {
        return 'delayed';
    }

    protected function getPacker(): Packer
    {
        if (empty($this->packer)) {
            $this->packer = make(Packer::class);
        }
        return $this->packer;
    }

    protected function getConsumer(): Consumer
    {
        if (empty($this->consumer)) {
            $this->consumer = make(Consumer::class);
        }
        return $this->consumer;
    }

    protected function getProducer(): Producer
    {
        if (empty($this->producer)) {
            $this->producer = make(Producer::class);
        }
        return $this->producer;
    }

    protected function getConnectionFactory(): ConnectionFactory
    {
        if (empty($this->connectionFactory)) {
            $this->connectionFactory = make(ConnectionFactory::class);
        }
        return $this->connectionFactory;
    }

    protected function getConfig(): ConfigInterface
    {
        if (empty($this->config)) {
            $this->config = make(ConfigInterface::class);
        }
        return $this->config;
    }
}
